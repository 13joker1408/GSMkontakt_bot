import os
import logging
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from pymongo import MongoClient
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
from telegram.ext import ApplicationBuilder
import asyncio
from functools import wraps

load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
client = MongoClient(
    os.getenv("MONGODB_URI"),
    maxPoolSize=10,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    minPoolSize=1,
    maxIdleTimeMS=30000,  # 30 —Å–µ–∫
    serverSelectionTimeoutMS=5000,  # 5 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç
    socketTimeoutMS=10000  # 10 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞
)
db = client[os.getenv("MONGO_DB_NAME")]
users_collection = db[os.getenv("MONGO_COLLECTION_NAME")]

# –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ user_id (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try:
    users_collection.create_index("user_id", unique=True)
except Exception as e:
    print(f"–ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 216903753))
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "supersecretpath")
APP_URL = os.getenv("RENDER_EXTERNAL_URL")

MODEL, CONDITION, KIT, DISTRICT, PHONE = range(5)

main_menu_keyboard = [
    [KeyboardButton("üì± –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
    [KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å")],
    [KeyboardButton("üè¨ –ê–¥—Ä–µ—Å–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")]
]

admin_menu_keyboard = main_menu_keyboard + [[KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")]]

main_menu = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)
admin_menu = ReplyKeyboardMarkup(admin_menu_keyboard, resize_keyboard=True)

app = FastAPI()
telegram_app: Application = None

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î
def run_in_executor(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, func, *args, **kwargs)
    return wrapper

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
@run_in_executor
def save_user_to_db(user_id, username, full_name):
    try:
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={user_id}, Name={full_name}, Username={username}")
        
        result = users_collection.update_one(
            {"user_id": user_id},
            {"$set": {
                "user_id": user_id,
                "username": username,
                "full_name": full_name
            }},
            upsert=True
        )
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: matched={result.matched_count}, modified={result.modified_count}, upserted_id={result.upserted_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        saved_user = users_collection.find_one({"user_id": user_id})
        if saved_user:
            print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {saved_user}")
            return True
        else:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        import traceback
        traceback.print_exc()
        return False

@run_in_executor
def get_users_from_db():
    try:
        print(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {users_collection.name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        total_count = users_collection.count_documents({})
        print(f"üîç –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {total_count}")
        
        users_cursor = users_collection.find(
            {}, 
            {"_id": 0, "user_id": 1, "username": 1, "full_name": 1}
        ).limit(100)
        
        users_list = list(users_cursor)
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_list)}")
        
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        for i, user in enumerate(users_list[:3]):
            print(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i+1}: {user}")
            
        return users_list
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        import traceback
        traceback.print_exc()
        return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    full_name = f"{update.effective_user.first_name or ''} {update.effective_user.last_name or ''}".strip()

    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={user_id}, Name={full_name}, Username={username}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    try:
        save_result = await save_user_to_db(user_id, username, full_name)
        print(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_result}")
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id == ADMIN_ID:
        await update.message.reply_text("üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu)
    else:
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)
        
    return ConversationHandler.END

async def start_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–æ–¥–µ–ª—å —Ç–≤–æ–µ–π —Ç–µ—Ö–Ω–∏–∫–∏:", reply_markup=ReplyKeyboardRemove())
    return MODEL

async def model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['model'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏:")
    return CONDITION

async def condition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['condition'] = update.message.text
    await update.message.reply_text("–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç?")
    return KIT

async def kit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['kit'] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏ —Ä–∞–π–æ–Ω:")
    return DISTRICT

async def district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['district'] = update.message.text

    contact_button = KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    keyboard = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if contact:
        phone_number = contact.phone_number
        context.user_data['phone'] = phone_number

        username = update.effective_user.username
        full_name = f"{update.effective_user.first_name or ''} {update.effective_user.last_name or ''}".strip()

        summary = (
            f"üì¶ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\n"
            f"üë§ –ò–º—è: {full_name}\n"
            f"üîó Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n\n"
            f"üîπ –ú–æ–¥–µ–ª—å: {context.user_data['model']}\n"
            f"üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {context.user_data['condition']}\n"
            f"üîπ –ö–æ–º–ø–ª–µ–∫—Ç: {context.user_data['kit']}\n"
            f"üîπ –†–∞–π–æ–Ω: {context.user_data['district']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        asyncio.create_task(context.bot.send_message(chat_id=ADMIN_ID, text=summary))
        
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_id = update.effective_user.id
        menu = admin_menu if user_id == ADMIN_ID else main_menu
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π.", reply_markup=menu)
        return ConversationHandler.END
    else:
        contact_button = KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
        keyboard = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è:", reply_markup=keyboard)
        return PHONE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    menu = admin_menu if user_id == ADMIN_ID else main_menu
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=menu)
    return ConversationHandler.END

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ú—ã ‚Äî —Å–∫—É–ø–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ —Å 2013 –≥–æ–¥–∞.\n"
        "–ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã, –Ω–æ—É—Ç–±—É–∫–∏, –ø–ª–∞–Ω—à–µ—Ç—ã. –û—Ü–µ–Ω–∫–∞ –∑–∞ 5 –º–∏–Ω—É—Ç!\n"
        "–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á—É—é —Ç–µ—Ö–Ω–∏–∫—É"
    )

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üè¨ <b>–ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã:</b>\n\n"
        "1. üè† <b>–ó–∞—Ä–µ—á—å–µ:</b> <a href='https://yandex.ru/maps/org/gsmkontakt/1276292498/'>—É–ª. –ú–∞–∫—Å–∏–º–∞ –ì–æ—Ä—å–∫–æ–≥–æ, –¥.35–∞</a>\n"
        "   üìû +7-953-972-66-85\n\n"
        "2. üè† <b>–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∏–π:</b> <a href='https://yandex.ru/maps/org/gsmkontakt/1294592969/'>—É–ª. –õ–æ–∂–µ–≤–∞—è, –¥.125–∞, –¢–¶ ¬´–ü–†–û–õ–ï–¢–ê–†–°–ö–ò–ô¬ª</a>\n"
        "   üìû +7-999-775-18-25\n\n"
        "3. üè† <b>–¶–µ–Ω—Ç—Ä:</b> <a href='https://yandex.ru/maps/org/gsmkontakt/1650827512/'>—É–ª. –ö–∞–º–∏–Ω—Å–∫–æ–≥–æ, –¥.4–ë</a>\n"
        "   üìû +7-952-018-54-72\n\n"
        "4. üè† <b>–°–æ–≤–µ—Ç—Å–∫–∏–π:</b> <a href='https://yandex.ru/maps/org/gsmkontakt/107114858592/'>—É–ª. 9 –º–∞—è, –¥.2, ¬´SPAR¬ª</a>\n"
        "   üìû +7-953-962-53-77\n\n"
        "5. üè† <b>–°–æ–≤–µ—Ç—Å–∫–∏–π:</b> <a href='https://yandex.ru/maps/org/gsmkontakt/1933915362/'>–ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∏–π –ø—Ä-—Ç, –¥.19, –¢–¶ ¬´–§–ê–ë–†–ò–ö–ê–ù–¢¬ª</a>\n"
        "   üìû +7-902-697-88-58\n\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–∏:</b> +7-800-302-20-71\n\n"
        "üåê <b>–°–∞–π—Ç:</b> gsmkontakt.ru\n"
        "üì± <b>Telegram:</b> @Strjke",
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    
async def users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list_data = await get_users_from_db()
        
        if not users_list_data:
            await loading_message.edit_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        user_lines = []
        for i, user in enumerate(users_list_data[:50], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50
            username = user.get('username', '-')
            full_name = user.get('full_name', '-')
            user_id_str = user.get('user_id', '-')
            
            line = f"{i}. ID: {user_id_str}, –ò–º—è: {full_name}, Username: @{username if username != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            user_lines.append(line)

        message = f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–∫–∞–∑–∞–Ω–æ {len(user_lines)} –∏–∑ {len(users_list_data)}):\n\n" + "\n".join(user_lines)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message) > 4000:
            message = message[:4000] + "\n\n...—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω."

        await loading_message.edit_text(message)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await loading_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

async def debug_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ë–î (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_ID:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        client.admin.command('ping')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        total_docs = users_collection.count_documents({})
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
        sample_users = list(users_collection.find({}).limit(5))
        
        debug_info = f"üîß –û—Ç–ª–∞–¥–∫–∞ –ë–î:\n\n"
        debug_info += f"‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK\n"
        debug_info += f"üìä –ë–∞–∑–∞: {db.name}\n"
        debug_info += f"üìä –ö–æ–ª–ª–µ–∫—Ü–∏—è: {users_collection.name}\n"
        debug_info += f"üìä –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}\n\n"
        
        if sample_users:
            debug_info += f"üë• –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:\n"
            for i, user in enumerate(sample_users, 1):
                debug_info += f"{i}. ID: {user.get('user_id')}, Name: {user.get('full_name')}\n"
        else:
            debug_info += "‚ùå –ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
        await update.message.reply_text(debug_info)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –ë–î: {e}")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìå –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üì± –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–µ, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–∞—Ç—å.\n"
        "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏."
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:
        help_text += "\n\nüîß –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n/debug_db - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î"
    
    await update.message.reply_text(help_text)

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    menu = admin_menu if user_id == ADMIN_ID else main_menu
    await update.message.reply_text(
        "‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é:",
        reply_markup=menu
    )

@app.post(f"/{WEBHOOK_SECRET}")
async def telegram_webhook(req: Request):
    body = await req.json()
    update = Update.de_json(body, telegram_app.bot)
    await telegram_app.update_queue.put(update)
    return {"ok": True}

@app.on_event("startup")
async def on_startup():
    global telegram_app

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        # –ü–∏–Ω–≥—É–µ–º MongoDB
        client.admin.command('ping')
        print("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        print(f"üîç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db.name}")
        print(f"üîç –ö–æ–ª–ª–µ–∫—Ü–∏—è: {users_collection.name}")
        print(f"üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {users_collection.count_documents({})}")
        
        # –í—ã–≤–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        existing_users = list(users_collection.find({}).limit(3))
        print(f"üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {existing_users}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
        import traceback
        traceback.print_exc()

    telegram_app = ApplicationBuilder().token(TOKEN).build()

    # ConversationHandler –¥–ª—è –∑–∞—è–≤–æ–∫
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üì± –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$"), start_form)],
        states={
            MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, model)],
            CONDITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, condition)],
            KIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, kit)],
            DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, district)],
            PHONE: [MessageHandler(filters.CONTACT | filters.TEXT, phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("start", start)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("help", help_command))
    telegram_app.add_handler(CommandHandler("debug_db", debug_db))
    telegram_app.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    telegram_app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚ÑπÔ∏è –û –Ω–∞—Å$"), about))
    telegram_app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üè¨ –ê–¥—Ä–µ—Å–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã$"), contacts))
    telegram_app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏$"), users_list))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π!)
    telegram_app.add_handler(MessageHandler(filters.TEXT, handle_unknown_message))

    await telegram_app.initialize()
    await telegram_app.start()

    webhook_url = f"{APP_URL}/{WEBHOOK_SECRET}"
    await telegram_app.bot.set_webhook(webhook_url)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    print(f"üîë ADMIN_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ADMIN_ID}")